;Pick-a-Number
;Revision of my 3rd Assembly program ever.
;Revision of my first original assembly program ever.
;Revised for TI-83 Plus

.nolist
#include "ti83plus.inc"
#define ProgStart $9D95
.list


theNumber EQU appBackupScreen + 200
rawInput EQU appBackupScreen + 210
numTries EQU appBackupScreen + 220
intInput EQU appBackupScreen + 221
playing EQU appBackupScreen + 222


.ORG ProgStart - 2

.db t2ByteTok, tAsmCmp

	LD A, $05
	LD (numTries), A						;numTries will be 5

	LD A, $01
	LD (playing), A							;set to Zero after correct guess

	CALL rand
	LD (theNumber), A						;theNumber is psuedo-random

	B_CALL(_ClrLCDFull)						;clear screen
	LD HL, 0
	LD (PenCol), HL							;init cursor column position
	LD HL, messageStart
	CALL outputLine

mainLoop:
	LD A, (numTries)
	DEC A
	LD (numTries), A
	JP Z, noMoreGuesses

	CALL getGuess
	CALL evalGuess

	;Check for gameover coming out of eval
	LD A, (playing)
	CP $0
	RET Z									;Return to OS
	JP mainLoop								;Can't use DZNJ cuz _NewLine destroys B

noMoreGuesses:
	LD HL, messageLoss
	CALL outputLine
	RET										;Return to OS

evalGuess:
	LD A, (intInput)
	LD C, A									;Indirectly load C with intInput
	LD A, (theNumber)
	CP C									;status (A-C)
	JP Z, correctGuess						;A - C = 0
	JP P, highGuess						;A - C = negative
	JP M, lowGuess							;A - C = positive

correctGuess:
	LD HL, messageWin
	CALL outputLine
	LD A, $0
	LD (playing), A
	RET										;return to mainLoop

highGuess:
	LD HL, messageHigher
	CALL outputLine
	RET										;return to mainloop

lowGuess:	
	LD HL, messageLower
	CALL outputLine
	RET										;return to mainloop

getGuess:
	LD HL, messageGuess
	CALL outputLine							;Show "Try to guess my number"

	CALL inputLine

	;try convert to int
	LD A, (rawInput)
	SUB $8E
	JP M, notADigit							;S flag negative indicator => not a digit
	CP $0A									;compare to 10
	JP NC, notADigit						;gte 10 => not a digit

	LD (intInput), A
	RET

notADigit:
	LD HL, messageNotADigit
	CALL outputLine
	JP getGuess

outputLine:		
	B_CALL(_PutS)							;OS-specific "output line" function
	B_CALL(_NewLine)
	RET

inputLine:
	B_CALL(_GetKey)							;OS-specific "input line" function
	LD (rawInput), A
	RET

rand:
	ld a, r									;psuedo-random number from R
	ld d, a
	ld e, $0A								;divide by "10"

;division routine from wikiti.brandonw.net
;divide d by e, quotient result in d, remainder in a

div_d_e:
	xor a
	ld b, 8

_loop:
	sla d
	rla
	cp e
	jr c, $+4
	sub e
	inc d

	djnz _loop

	ret

messageStart:
.DB "I'm thinking of a number between 0 and 9.",0

messageGuess:
.DB "Try to guess my number.",0

messageLoss:
.DB "No more guesses!",0

messageWin:
.DB "You're a great guesser!",0

messageHigher:
.DB "My number is higher.",0

messageLower:
.DB "My number is lower.",0

messageNotADigit:
.DB "You must enter a digit 0 to 9.",0

.END