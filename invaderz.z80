;Space Invaders clone for TI-83
;Backlog:
; BUG: sometimes I blast the sh*t out of a column & it disappears--even tho I haven't yet cleanup up explosions in my code! how?!?!
;......and it seems to cause other columns to glitch somehow. Not sure how it's possible!
; 2DO: account for missile byte shift. maybe use mcol + 5 due to sprite design?
; 2DO: Add animation of sprites, e.g. eyes legs
; 2DO: Allow drop bomb incl adjust brow (on a timer)
; 2DO: Sprite collision (player vs invader, player vs bomb)
; 2DO: Count lives lost
; 2DO: Count invaders killed

;Finished:
; BUG: Can't shoot far right column. I think it's line 306 where I compare to 80d
; item below doesn't work like this anymore--total refactor
; BUG: Good news is coff recomputation is working. Bad news is if it happens in the middle of screen, everybody jumps back left
;......SO when this happens we should compensate by increasing vcol position
;......OR we should do it only at the far left
;......ALSO I hate that explosions cause non-zero column computation. meaning that empty column isn't reflected until next kill.
;......another argument to doing this computation at the margins, not after a kill
; 2DO: Recompute vrightbound based on max coff --refactored & doesn't work like this anymore
; MAYB: Move player in 8px increments instead of smoothly? Enemy will always move smoothly tho!!
;.......tried this and didn't like it.
; 2DO: Recompute coff periodically when an entire left column is 0
; 2DO: Cleanup explosions periodically
; 2DO: Set a flag when an exploded enemy has occurred
; ...after the next run of putSprite, clear any explodes & replace with zero
; 2DO: Add range of motion (i.e. upd leftmost & rightmost) when an enemy is destroyed
; 2DO: Blank the invaders element where enemy was killed so nothing renders in that place
; BUG: For some reason Enter/Clear doesn't quit on RET Z appx line 110
; 2DO: Sprite collision (missile vs invader, 
; 2DO: Accept input, spawn missile
; 2DO: Allow missile animation incl adjust mrow (on a timer)
; 2DO: Look for optys to use JR instead of JP
; 2DO: Consider pcol move my 2px instead of 1px;
; 2DO: Look for optys to use DJNZ in outer loops; just need to use PUSH BC & POP BC to preserve B!
; 2DO: Accept input, adjust pcol left or right
; 2DO: Display player sprite
; 2DO: Move entire fleet of invaders by adjusting vcol (on a timer)
; BUG: When col (px) spans bytes, sprite is being cutoff
; NO: Have a 2nd copy of "invaders" array that points to left-facing sprites
; NO: In case of blanking an element, be sure to blank both left & right versions!
; There won't be right & left facing sprites. This was going to be a trick to avoid blanking the buffer on each draw cycle
; But, it's not going to work due to proximity of sprites and need to OR each rendered sprite against existing buffer contents



.nolist
#include "ti83plus.inc"
#define ProgStart $9D95
.list

screenSize EQU 768


picData EQU appBackupScreen
rawInput EQU appBackupScreen + screenSize


col EQU rawInput + 1
row EQU rawInput + 2
ltpart EQU rawInput + 3
rtpart EQU rawInput + 4
spriteShift EQU rawInput + 5
framect EQU rawInput + 6
__vcol EQU rawInput + 7
vrow EQU rawInput + 8
vmod EQU rawInput + 9
pcol EQU rawInput + 10
prow EQU rawInput + 11
mrow EQU rawInput + 12
;leave 6 bytes for next var
ileftmost EQU rawInput + 18
irightmost EQU rawInput + 19
vrightbound EQU rawInput + 20
enemyCount EQU rawInput + 21
tock EQU rawInput + 22
killFlag EQU rawInput + 23


.ORG ProgStart - 2

.db t2ByteTok, tAsmCmp

	;given a screen 96 px wide x 64 px tall
	;(in 8x8 terms this is 12 x 8)
	;with 8px per byte, a row (horizontal line) is 12 bytes
	;valid range for sprite upper left (col, row) is (0,0) to (88 px,57 px) or ($58, $38)



	;init player row, col
	LD A, $38
	LD (prow), A
	
	;LD A, $2C
	LD A, $28
	LD (pcol), A

	;init invader (fleet) moving right
	LD A, 1
	LD (vmod), A
	
	;init invader (vrow)
	LD A, 0
	LD (vrow), A
	
	;init missile rows & cols at 0
	;mrow is a pointer to mrow,mcol,mrow0,mcol0,mrow1,mcol1
	LD B, 6
initMrow:
	LD HL, mrow
	LD (HL), 0
	INC HL
	DJNZ initMrow

	;init ileftmost, irightmost, vrightbound
	LD HL, ileftmost
	LD (HL), 0
	LD HL, irightmost
	LD (HL), $0A						;10d is zero-based right column index
	LD HL, vrightbound
	LD (HL), 7

	;init numinvaders
	;needs to match invaders array, btw
	;entire game is hard-coded for 11 x 4
	;just an easy way to track game-over condition
	LD HL, enemyCount
	LD (HL), $2C						;44d enemies to start

	;init killFlag
	LD HL, killFlag
	LD (HL), 0

	;init "timer"
	LD A, 0
	PUSH AF								;set initial condition going into mainloop

mainLoop:
	POP AF								;recall A value as a loop counter
	INC A								;increment
	PUSH AF								;save it
	CP 0
	CALL Z, update						;if we've rolled-over 256 to 0 it's time to update & render
										;later I might decouple update from render
	AND %00000111						;equivalent of A mod 8
	CP 0
	JR Z, getInput						;if 0, let's check for input
	JR mainLoop							;repeat

getInput:
	B_CALL(_GetCSC)						;check keypad input
	CP skUp
	JR Z, fireMissile
	CP skLeft
	JR Z, playerLeft
	CP skRight 
	JR Z, playerRight
	CP skClear
	JP Z, playerQuit
	JR mainLoop
	
playerQuit:
	B_CALL(_ClrLCDFull)					;clear screen
	LD HL, 0
	LD (PenCol), HL						;init cursor column position
	LD HL, quitMessage
	B_CALL(_PutS)						;OS-specific "output line" function
	B_CALL(_GetKey)						;"input line" function (stores result in A)
	CP $31								;ASCII "1" for Continue <<<<<<<<<<<<<<<<<<<<<<<<<<<< not working
	JR Z, mainLoop
	POP AF								;cleanup last push from mainloop
	RET

playerLeft:
	LD A, (pcol)
	CP 0								;leftmost boundary = 0
	JR Z, mainLoop						;do nothing & keep looping
	LD B, $FC							;-4d
	JR playerMove
	
playerRight:
	LD A, (pcol)
	CP $58								;rightmost boundary = 88d
	JP Z, mainLoop						;do nothing & keep looping
	LD B, 4
	
playerMove:
	ADD A, B							;otherwise g'head and update player col pcol
	LD (pcol), A						;save updated position
	CALL putPlayer						;update the screen buffer
	JR mainLoop							;keep looping

fireMissile:
	LD HL, mrow							;missile row, zer0 indicates inactive flag
	LD A, 3								;we have 3 "slots" or silos available for missiles

_nextSilo:
	PUSH AF								;save our silo count
	LD A, (HL)
	CP 0								;is this silo ready? == 0?
	JR Z, _setMissile					;if so, launch a missile here!
	INC HL								;inc 1x brings us to mcol which we don't need right now
	INC HL								;inc 2x to get next mrow
	POP AF								;recall our silo count
	DEC A								;decrement silo count
	CP 0
	JR NZ, _nextSilo					;not zero so go next silo
	JR mainLoop

_setMissile:
	POP AF								;cleanup the previous push
	LD (HL), $38						;init mrow at line 56d
	INC HL								;advance to mcol
	LD A, (pcol)						;stage pcol for...
	LD (HL), A							;init mcol at pcol
	JR mainLoop

update:
	LD A, (vmod)
	CP 1								;vmod == 1?
	JR Z, _updRight						;yes, so update right
										;else update left

_updLeft
	LD B, $0B							;loop a max of 11d times
	LD HL, invaders

__linner
	;find first non-FF index
	LD A, (HL)							;examine vcoff
	CP $FF								;is it FF?
	JR NZ, __lfound						;not FF, thus found leftmost column
	PUSH BC								;preserve iteration count
	LD B, 0
	LD C, 5
	ADD HL, BC							;skip to next vcoff +5 bytes
	POP BC								;recall iteration count
	DEC B								;decrement count
	LD A, B								;stage count for comparision
	CP 0								;done iterating?
	JR NZ, __linner						;repeat
	
	JR _justUpdate

__lfound
	CP 0								;position is 0?
	JR Z, _toggleDir					;yes - toggle the other direction
	JR _justUpdate						;no - just update in same direction

_updRight
	LD B, $0B
	LD HL, invaders + $32				;search from the right, backwards from +50d
	
__rinner
	;find first non-FF index
	LD A, (HL)
	CP $FF
	JR NZ, __rfound
	PUSH BC
	LD B, $FF
	LD C, $FB							;load BC with -5
	ADD HL, BC
	POP BC								;recall count
	DEC B
	LD A, B
	CP 0
	JR NZ, __rinner
	
	JR _justUpdate
	
__rfound
	CP $58								;position is 88d?
	JR Z, _toggleDir
	JR _justUpdate

_toggleDir
	LD A, (vmod)
	NEG
	LD (vmod), A

_justUpdate
	LD B, $0B
	LD A, (vmod)
	LD D, A								;stage vmod to D
	LD HL, invaders
	
__jinner
	LD A, (HL)
	CP $FF								;FF is a flag for obliterated columns
	JR Z, __updCont						;skip FF
	ADD A, D							;vcoff + vmod
	LD (HL), A							;apply update

__updCont
	PUSH BC
	LD B,0
	LD C,5
	ADD HL, BC
	POP BC
	DJNZ __jinner

render:
	CALL clearGrBuffer
	CALL putPlayer
	CALL putMissiles

	LD HL, invaders						;HL must point to invaders before "putInvaders"
	LD A, (vrow)
	LD B, 4								;putInvaders will loop x4 lines of enemies
	CALL putInvaders

	B_CALL(_GrBufCpy)					;finally display the screen buffer!

	RET									;finally return to caller

putPlayer:
	LD IX, player						;loads right-facing version
	LD A, (prow)
	LD (row), A
	LD A, (pcol)
	LD (col), A
	CALL putSprite
	RET

putMissiles:
	LD HL, mrow							;pointer to mrow array (3 elements of 2b each)
	LD B, 3

_eachMissile:
	PUSH BC								;save our B location for DJNZ
	LD A, (HL)							;mrow
	CP 0								;is this missile in flight? Zer0 = No
	PUSH HL								;save our pointer before we call updMissile
	CALL NZ, _updMissile				;Non-zero = Yes
	POP HL								;whether we called updMissile or not, get our ptr back
	INC HL
	INC HL								;2x INC gets us to next mrow
	POP BC								;pop our counter
	DJNZ _eachMissile
	RET

_updMissile:
										;HL already points to current mrow index
										;A already has (HL) value i.e. mrow value
	SUB 4								;move missile -4px (upward on screen)
	LD (HL), A							;commit the update to mrow
	RET Z								;if we're at 0 - exit
	;LD (row), A							;init (row) for _putMissile <<<<<
	
;begin collision check
	;check row - is mrow even high enough to hit?
	LD A, (vrow)
	LD B, A								;stage vrow in B
	LD A, (HL)							;retrieve mrow in A
	SUB B								;subtract vrow from mrow
	LD D, A								;load dividend to D
	LD E, 8								;load divisor to E
	CALL div_d_e						;quotient will be in D--this is row offset in invaders array
	LD A, D								;stage quotient
	CP 4								;compare to 4
	JP Z, _checkCols					;equal 4 so g'head
	JP C, _checkCols					;less than 4 that's ok too
	JP NC, _putMissile					;greater than 4 it's not a hit yet

_checkCols
	PUSH HL								;save our mrow pointer
	INC HL								;HL still points to mrow, advance to mcol
	LD A,(HL)							;retrieve mcol in A
	;LD (col), A							;init (col) for _putMissile <<<<<
	AND %11111000						;normalize to factor of 8
	LD E, A								;save vcoff target in E from A
	LD B, $0B							;iterate max of 11d times
	LD HL, invaders

_checkCol
	PUSH BC								;save our count
	LD A, (HL)							;vcoff instance
	AND %11111000						;normalize to factor of 8
	CP E								;vcoff instance matches vcoff target?
	JR Z, _match						;if yes, process target row in this column
	JR _cont							;no match, go next

_match
	PUSH DE								;save our vcoff & roff target
	PUSH HL								;save HL vcoff pointer
	LD E, 0								;we will use E to track sum of this column
	LD B, 4								;iterate x4 times inner loop
	LD A, 0								;count up to D rows (from begin collision check)
	
__minner
	PUSH AF
	INC HL								;go to first or next spoff
	CP D								;is this our row? D saved earlier
	JR NZ, __mskiprow					;No, this is not our row
	
	;yes, this row
	LD A, (HL)							;Yes, this row (stage rowscore)
	CP 0								;Is it already dead?
	JR Z, __mnextrow					;Yes, already dead
	
	;no, not dead kill it
	LD (HL), 0							;kill this enemy
	LD A, 1
	LD (killFlag), A					;set kill flag

__mskiprow
	LD A, (HL)							;stage rowscore for skipped; re-stage for killed

__mnextrow
	ADD A, E							;compute running total
	LD E, A								;commit total
	POP AF
	INC A								;+= 1 rowcount
	DJNZ __minner
	
	;resume outer loop, post-match
	POP HL								;recall vcoff pointer
	LD A, E								;stage cumulative sum
	CP 0
	JP NZ, __mpostmatch					;non-zero sum means still enemies here
	LD (HL), $FF						;zero sum means this column destroyed; set flag

__mpostmatch
	POP DE								;recall our outer vcoff target (E) & roff (D)

_cont
	LD B,0
	LD C,5
	ADD HL, BC							;advance 5 bytes to next vcoff
	POP BC								;recall our outer count
	DJNZ _checkCol						;outer loop!!
	
	;resume _checkCols, all loops completed
	POP HL								;recall mrow
	LD A, (killFlag)					;did we have an explosion?
	CP 1
	JR NZ, _putMissile					;No, we didn't
	
	;stop missile & put explosion
	LD (HL), 0							;Else yes set mrow flag to 0 - stop missile
	LD A, 0
	LD (killFlag), A					;turn off kill flag

_putMissile
	LD A, (HL)							;HL points at mrow
	LD (row), A
	INC HL								;advance to mcol
	LD A, (HL)
	LD (col), A
	LD IX, missile
	CALL putSprite
	RET									;return to caller which was _eachMissile via _updMissile

putInvaders:
	;point to invaders
	;read the column offset (vcoff)
	;read the invader style
	;add 8px row offset (vroff)
	;repeat for each row
	;repeat for each column
	
	LD B, $0B							;init 11d columns
	LD HL, invaders
	
_putInvaderCol:
	PUSH BC								;preserve iteration (outer) count
	LD A, (HL)							;get vcoff for this column
	CP $FF								;$FF is flag for empty column
	JP Z, _skipInvader					;is it FF? don't process it
	LD D, A								;else we use D to hold vcoff
	LD A, (vrow)
	LD E, A								;initial vrow will become vroff
	LD B, 4

_putInvader
	INC HL								;next element is sp_sheet offset (spoff)
	PUSH BC								;preserve iteration (inner) count
	LD B, 0
	LD C, (HL)							;stage BC with byte offset
	LD IX, sp_sheet
	ADD IX, BC							;IX now points to correct sprite frame
	PUSH HL								;preserve our place in invaders
	PUSH DE								;preserve our vcoff & vroff
	LD HL, col
	LD (HL), D							;init col for putSprite
	LD HL, row
	LD (HL), E							;init row for putsprite
	CALL putSprite
	POP DE								;recall our vcoff, vroff
	POP HL								;recall our place in invaders
	POP BC								;recall our iteration count (inner)
	LD A, E								;recall vroff
	ADD A, 8							;add 8
	LD E, A								;commit sum to E
	DJNZ _putInvader
	INC HL								;next element is coff
	JR _contInvader

_skipInvader
	LD B, 0
	LD C, 5								;next vcoff is +5 bytes
	ADD HL, BC							;pointer to next vcoff

_contInvader
	POP BC								;recall our iteration count (outer)
	DJNZ _putInvaderCol
	RET

;anim:
	;(framect) must be initialized
	;IX must be pre-loaded with sprite, e.g. LD IX, pacman
	;this works cuz putSprite INCs IX thru each sprite row
	;so last row of frame sets up 1st row of next frame
	;CALL clearGrBuffer					;erase entire buffer every time?? only if we must
	
	;CALL putSprite
	;LD A, (framect)
	;DEC A
	;RET Z
	;LD (framect), A
	;JR anim

putSprite:
	;(row),(col) must be initialized
	;IX must be pre-loaded with sprite, e.g. LD IX, pacman
	;draws an 8x8 sprite
	;looks up row, col values from variables
	;IX must contain pointer to sprite
	;Registers destroyed: A, HL, DE, BC, IX

	;first let's find the byte row!
	;Address should be 12 * row + col
	;only need to do this once for 1st row (we'll just increment thereafter)
	LD A, (row)							;row in px
	LD DE, $0C							;12d
	CALL de_times_a						;result is in HL
	PUSH HL								;save this result
	LD HL, PlotSScreen					;point to screen buffer
	POP BC								;retrieve result
	ADD HL, BC							;add result (row offset) to HL
	
	;next find byte column & bitshift (if any)
	;Byte offset should be col / 8
	;only need to do this once for 1st row (we'll just increment thereafter)
	LD A, (col)							;col in px
	LD D, A								;dividend A
	LD E, 8								;divisor 8
	CALL div_d_e						;quotient (column) to D, remainder (bitshift) to A
	LD (spriteShift), A					;save bitshift to RAM
	LD B, 0								;Zero-out the left half of BC
	LD C, D								;load quotient (column) to C of BC
	ADD HL, BC							;add (column) offset to HL
	
	LD B, 8								;_spriteRow to run 8 times via DJNZ

_spriteRow:
	;expect IX to contain ptr to sprite
	;draw a 1-byte horizontal row of a sprite
	;first load the spriterow into memory
	PUSH BC								;preserve B for DJNZ later
	LD A, (IX)							;load sprite from IX to A
	LD (ltpart), A						;store a copy of sprite in leftpart
	LD (rtpart), A						;store a copy of sprite in rightpart
	LD A, (spriteShift)					;recall spriteshift
	CP 0								;compare A to zero
	JR Z, _leftByte						;if A is zero JP to leftByte, don't do any bit shifting

	;handle situation where x spans 2 bytes
	;A contains the shift offset from above
	LD B, A								;prepare to loop B times per offset bits
	LD C, A								;will use offset for masking momentarily
	PUSH HL								;preserve byte location
	CALL _shiftLoop						;loop will run B times to shift bits
	PUSH HL								;preserve rtpart
	LD HL, myMask						;NOTE: B is zero coming out of loop; C holds offset, so...
	ADD HL, BC							;...HL now points to correct mask for this offset
	LD A, (HL)							;stage the mask value in A
	LD B, A								;Load B with mask value
	POP HL								;retrieve rtpart loc
	LD A, (HL)							;Load A with rtpart value
	AND B								;apply mask
	LD (rtpart), A						;rtpart is now masked
	JR _rightByte
	
_shiftLoop:
	LD HL, ltpart
	SRL (HL)							;shift right
	LD HL, rtpart
	RR (HL)								;rotate right
	DJNZ _shiftLoop
	RET
	
_rightByte:
	POP HL								;retrieve byte location
	INC HL								;move one byte ahead for right byte
	LD A, (rtpart)						;Stage A with right half of sprite bits
	OR (HL)								;OR with whatever's already there
	LD (HL), A							;set byte value; i.e. rtpart + existing
	DEC HL								;drop back to original SScreen location 
	
_leftByte:
	;for no bitshift, HL already contains correct SScreen loc, no need to pop
	LD A, (ltpart)						;Stage A with left half of sprite bits
	OR (HL)								;OR with whatever's already there
	LD (HL), A							;set byte value, e.g. ltpart + existing
	
_nextByte:
	LD B, 0								;B of BC to 0
	LD C, $0C							;C of BC to 12d
	ADD HL, BC							;increment HL by 12 for next row
	INC IX								;increment ptr to spriteRow

	POP BC
	DJNZ _spriteRow

	RET

clearGrBuffer:
	LD HL, PlotSScreen
	LD DE, PlotSScreen + 1
	LD BC, screenSize - 1
	LD (HL), 0
	LDIR
	RET

;fast multiplication route from http://tutorials.eeems.ca/ASMin28Days/lesson/day15.html
;HL = DE * A

de_times_a:
	LD HL, 0							;HL to store the product
	LD B, 8								;8-bits to check

_loop0:
	RRCA								;check LSB of A
	JR NC, _skip						;if zero, skip addition
	ADD HL, DE

_skip:
	SLA E								;shift DE one bit left
	RL D
	DJNZ _loop0
	RET

;division routine from wikiti.brandonw.net
;divide d by e, quotient result in d, remainder in a

div_d_e:
	XOR A
	LD B, 8

_loop1:
	SLA D
	RLA
	CP E
	JR C, $+4
	SUB E
	INC D

	DJNZ _loop1

	RET

sp_sheet:
;empty i.e. vanquished invader
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000

;style alpha frame 1
.DB %00000000
.DB %01100011
.DB %00010100
.DB %00111110
.DB %01101011
.DB %01111111
.DB %01000001
.DB %00110110

;style alpha frame 2
.DB %00000000
.DB %01100011
.DB %00010100
.DB %00111110
.DB %01101011
.DB %01111111
.DB %01010101
.DB %00100010

;style beta frame 1
.DB %00000000
.DB %00011100
.DB %00111110
.DB %01111111
.DB %01101101
.DB %01111111
.DB %00101010
.DB %01001001

;style beta frame 2
.DB %00000000
.DB %00011100
.DB %00111110
.DB %01111111
.DB %01011011
.DB %01111111
.DB %00101010
.DB %01001001

;style exploded (40d, $28)
.DB %00000000
.DB %01001001
.DB %00101010
.DB %00000000
.DB %01100011
.DB %00000000
.DB %00101010
.DB %01001001

invaders:
;  coff, styles...
.DB   0, $10, $20, $10, $20
.DB   8, $10, $20, $10, $20
.DB $10, $10, $20, $10, $20
.DB $18, $10, $20, $10, $20
.DB $20, $10, $20, $10, $20
.DB $28, $10, $20, $10, $20
.DB $30, $10, $20, $10, $20
.DB $38, $10, $20, $10, $20
.DB $40, $10, $20, $10, $20
.DB $48, $10, $20, $10, $20
.DB $50, $10, $20, $10, $20

player:
;right facing
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00010100
.DB %00011100
.DB %00111110
.DB %01111111
.DB %01111111

missile:
.DB %00000000
.DB %00001000
.DB %00001000
.DB %00001000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000

explosion:
.DB %00000000
.DB %01001001
.DB %00101010
.DB %00000000
.DB %01100011
.DB %00000000
.DB %00101010
.DB %01001001

;why not write these as binary masks since that's what they're used for??? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< LOOK
myMask:
.DB 0, $80, $C0, $E0, $F0, $F8, $FC, $FE, $FF

quitMessage:
.DB "Press 1 to Continue. Any other key to Quit.",0

.END