;Space Invaders clone for TI-83
;Backlog:
; 2DO: Still haven't recomputed leftmost & rightmost when an enemy is destroyed
; BUG: For some reason Enter/Clear doesn't quit on RET Z appx line 110
; MAYB: Move player in 8px increments instead of smoothly? Enemy will always move smoothly tho!!
; 2DO: Add animation of sprites, e.g. eyes legs
; 2DO: Allow drop bomb incl adjust brow (on a timer)
; 2DO: Sprite collision (missile vs invader, player vs invader, player vs bomb)
; 2DO: Count lives lost
; 2DO: Count invaders killed
; 2DO: Blank the invaders element where enemy was killed so nothing renders in that place (or add code to skip putSprite in such cases)
; 2DO? Should they keep going back & forth only 8px even after half or more are eliminated? Or should remaining guys use full range?
;;;;;;I think whenever an enemy is killed, a check should be done for leftmost & rightmost enemy remaining
;;;;;;This will be used to determine left & right max--ugh, but then we won't be hard-coded at 11 columns anymore

;Finished:
; 2DO: Accept input, spawn missile
; 2DO: Allow missile animation incl adjust mrow (on a timer)
; 2DO: Look for optys to use JR instead of JP
; 2DO: Consider pcol move my 2px instead of 1px;
; 2DO: Look for optys to use DJNZ in outer loops; just need to use PUSH BC & POP BC to preserve B!
; 2DO: Accept input, adjust pcol left or right
; 2DO: Display player sprite
; 2DO: Move entire fleet of invaders by adjusting vcol (on a timer)
; BUG: When col (px) spans bytes, sprite is being cutoff
; NO: Have a 2nd copy of "invaders" array that points to left-facing sprites
; NO: In case of blanking an element, be sure to blank both left & right versions!
; There won't be right & left facing sprites. This was going to be a trick to avoid blanking the buffer on each draw cycle
; But, it's not going to work due to proximity of sprites and need to OR each rendered sprite against existing buffer contents



.nolist
#include "ti83plus.inc"
#define ProgStart $9D95
.list

screenSize EQU 768


picData EQU appBackupScreen
rawInput EQU appBackupScreen + screenSize


col EQU rawInput + 1
row EQU rawInput + 2
ltpart EQU rawInput + 3
rtpart EQU rawInput + 4
spriteShift EQU rawInput + 5
framect EQU rawInput + 6
vcol EQU rawInput + 7
vrow EQU rawInput + 8
vmod EQU rawInput + 9
pcol EQU rawInput + 10
prow EQU rawInput + 11
mrow EQU rawInput + 12
;leave 6 bytes for next var
ileftmost EQU rawInput + 18
irightmost EQU rawInput + 19
vrightbound EQU rawInput + 20
numinvaders EQU rawInput + 21
rowoff EQU rawInput + 22


.ORG ProgStart - 2

.db t2ByteTok, tAsmCmp

	;given a screen 96 px wide x 64 px tall
	;(in 8x8 terms this is 12 x 8)
	;with 8px per byte, a row (horizontal line) is 12 bytes
	;valid range for sprite upper left (col, row) is (0,0) to (88 px,57 px) or ($58, $38)



	;init player row, col
	LD A, $38
	LD (prow), A
	
	LD A, $2C
	LD (pcol), A

	;init invader (fleet) left column
	LD A, 3
	LD (vcol), A
	
	;init invader (fleet) moving right
	LD A, 1
	LD (vmod), A
	
	;init invader (fleet) top row
	LD A, 0
	LD (vrow), A

	;init missile rows & cols at 0
	;mrow is a pointer to mrow,mcol,mrow0,mcol0,mrow1,mcol1
	LD B, 6
initMrow:
	LD HL, mrow
	LD (HL), 0
	INC HL
	DJNZ initMrow

	;init ileftmost, irightmost, vrightbound
	LD A, 0
	LD (ileftmost), A
	LD A, 10
	LD (irightmost), A
	LD A, 7
	LD (vrightbound), A

	;init numinvaders
	;needs to match invaders array, btw
	;entire game is sorta hard-coded for 11 x 4
	;just an easy way to track game-over condition
	LD A, 44
	LD (numinvaders), A

	;init "timer"
	LD A, 0
	PUSH AF								;set initial condition going into mainloop

mainLoop:
	POP AF								;recall A value as a loop counter
	INC A								;increment
	PUSH AF								;save it
	CP 0
	CALL Z, update						;if we've rolled-over 256 to 0 it's time to update & render
										;later I might decouple update from render
	AND %00000111						;equivalent of A mod 8
	CP 0
	JR Z, getInput						;if 0, let's check for input
	JR mainLoop							;repeat

getInput:
	B_CALL(_GetCSC)						;check keypad input
	CP skUp
	JR Z, fireMissile
	CP skLeft
	JR Z, playerLeft
	CP skRight 
	JR Z, playerRight
	CP skClear
	JP Z, playerQuit
	JR mainLoop
	
playerQuit:
	B_CALL(_ClrLCDFull)					;clear screen
	LD HL, 0
	LD (PenCol), HL						;init cursor column position
	LD HL, quitMessage
	B_CALL(_PutS)						;OS-specific "output line" function
	B_CALL(_GetKey)						;"input line" function (stores result in A)
	CP $31								;ASCII "1" for Continue <<<<<<<<<<<<<<<<<<<<<<<<<<<< not working
	JR Z, mainLoop
	POP AF								;cleanup last push from mainloop
	RET

playerLeft:
	LD A, (pcol)
	CP 0								;leftmost boundary = 0
	JR Z, mainLoop						;do nothing & keep looping
	LD B, $FE							;-2d
	JR playerMove
	
playerRight:
	LD A, (pcol)
	CP $58								;rightmost boundary = 88d
	JR Z, mainLoop						;do nothing & keep looping
	LD B, 2
	
playerMove:
	ADD A, B							;otherwise g'head and update player col pcol
	LD (pcol), A						;save updated position
	CALL putPlayer						;update the screen buffer
	JR mainLoop							;keep looping

fireMissile:
	LD HL, mrow							;missile row, zer0 indicates inactive flag
	LD A, 3								;we have 3 "slots" or silos available for missiles

_nextSilo:
	PUSH AF								;save our silo count
	LD A, (HL)
	CP 0								;is this silo ready? == 0?
	JR Z, _setMissile					;if so, launch a missile here!
	INC HL								;inc 1x brings us to mcol which we don't need right now
	INC HL								;inc 2x to get next mrow
	POP AF								;recall our silo count
	DEC A								;decrement silo count
	CP 0
	JR NZ, _nextSilo					;not zero so go next silo
	JR mainLoop

_setMissile:
	POP AF								;cleanup the previous push
	LD (HL), $38						;init mrow at line 56d
	INC HL								;advance to mcol
	LD A, (pcol)						;stage pcol for...
	LD (HL), A							;init mcol at pcol
	JR mainLoop

update:
	;move invaders right/left
	LD A, (vrightbound)					;stage vrightbound in A
	LD B, A								;standby vrightbound in B for compare in a moment
	LD A, (vcol)
	CP 0								;leftmost boundary is always Zero 0px
	JR Z, _toggleDir
	CP B								;vrightbound is 88 - ((rightmost - leftmost) * 8)
	JR NZ, _justUpdate

_toggleDir:
	LD A, (vmod)
	NEG
	LD (vmod), A

_justUpdate:
	LD A, (vmod)
	LD B, A
	LD A, (vcol)
	ADD A, B
	LD (vcol), A

render:
	CALL clearGrBuffer
	CALL putPlayer
	CALL putMissiles

	LD HL, invaders						;HL must point to invaders before "putInvaders"
	LD A, (vrow)
	LD (row), A							;row must be init'd to vrow before "putInvaders"
	LD B, 4								;putInvaders will loop x4 lines of enemies
	CALL putInvaders

	B_CALL(_GrBufCpy)					;finally display the screen buffer!

	RET

putPlayer:
	LD IX, player						;loads right-facing version
	LD A, (prow)
	LD (row), A
	LD A, (pcol)
	LD (col), A
	CALL putSprite
	RET

putMissiles:
	LD HL, mrow							;pointer to mrow array (3 elements of 2b each)
	LD B, 3

_eachMissile:
	PUSH BC								;save our B location for DJNZ
	LD A, (HL)							;mrow
	CP 0								;is this missile in flight? Zer0 = No
	PUSH HL								;save our pointer before we call updMissile
	CALL NZ, _updMissile				;Non-zero = Yes
	POP HL								;whether we called updMissile or not, get our ptr back
	INC HL
	INC HL								;2x INC gets us to next mrow
	POP BC								;pop our counter
	DJNZ _eachMissile
	RET

_updMissile:
										;HL already points to current mrow index
										;A already has (HL) value i.e. mrow value
	SUB 4								;move missile -4px (upward on screen)
	LD (HL), A							;commit the update to mrow
	RET Z								;if we're at 0 - exit
	
	;;;;;;;JP __putMissile						;just skip all the collision for now

										;begin check collision...
__checkByteRow
	;to determine which invaders byterow we're in
	;we do (mrow - vrow) / 8
	PUSH HL								;preserve HL (mrow pointer)
	PUSH HL								;preserve HL (mrow pointer) cuz we could need it 2x
	LD HL, vrow							;point HL at vrow i.e. invader row
	SUB (HL)							;subtract vrow from mrow
	LD D, A								;stage dividend param (mrow - vrow) for div_d_e
	LD A, 8
	LD E, A								;stage divisor param (8) for div_d_e
	CALL div_d_e						;after this, D will contain quotient i.e. byterow
	LD A, D								;stage quotient in A for comparison
	CP 3								;compare to 3 (4th row, zero based)
	JR Z, __checkByteCol				;if row == 4 goto next task
	JR C, __checkByteCol				;if A < 4 i.e. row < 4 goto next task
	POP HL								;cleanup unneeded push (1 of 2) of mrow
	POP HL								;recall mrow pointer (2 of 2)
	JR __putMissile						;just display an updated missile

__checkByteCol
	;we need to do byterow * 11 to help find invaders element
	;our multiplication subroutine does DE times A
	LD E, D								;D still holds result from above, move it E
	LD D, 0
	LD A, $0B							;11d
	CALL de_times_a						;after this, HL will contain product
	LD A, L								;more accurately L holds our 8-bit product
	LD (rowoff), A						;save row offset--can't think of another way to do this

	;first check if mcol > vcol
	LD A, (vcol)						;stage vcol in A
	POP HL								;recall mrow pointer (1 of 2 pops) needed to get mcol
	INC HL								;advance 1 byte to mcol pointer
	CP (HL)								;compare A vcol to (HL) mcol
	JR Z, __finalCollision				;if vcol == mcol goto next task
	JR C, __finalCollision				;if A < (HL) i.e. vcol < mcol i.e. mcol > vcol goto next task
	POP HL								;recall mrow pointer (2 of 2 pops - conditional)
	JR __putMissile						;just display an updated missile

__finalCollision
	;now to determine which bytecol we're in we'll do (mcol - vcol) / 8
	;for better flow we'll actually do (-vcol + mcol) instead
	NEG									;A still holds vcol and is now -vcol
	ADD A,(HL)							;HL still points to mcol; add it to -vcol i.e. (mcol - vcol)
	LD D, A								;stage result (mcol - vcol) as dividend param for div_d_e
	LD A, 8
	LD E, A								;stage divisor param (8) for div_d_e
	CALL div_d_e						;after this, D will contain quotient i.e. bytecol aka column offset
	LD A, (rowoff)						;remember our rowoffset computed earlier
	ADD A, D							;add column offset
	LD B, 0
	LD C, A								;BC now contains our row offset in bytes
	LD HL, invaders						;recall our invaders array pointer
	ADD HL, BC							;add our total offset to HL
	LD A, (HL)							;what's here?
	CP 0								;is it empty?
	JR NZ, __putExplosion				;not empty! replace byte w an explosion!
	POP HL								;recall mrow pointer (2 of 2 pops - conditional)
	JR __putMissile						;just display an updated missile
										;...end check collision

__putExplosion
	;arrive here with HL pointing to invaders array index
	LD (HL), 0  ;$28						;40d'th byte is explode frame of sp_sheet
	POP HL								;recall mrow pointer (2 of 2 pops - conditional)
	LD (HL), 0							;set mrow to 0 so missile stops flying & silo available
										;consider setting a flag to flip explosions to 0 in a subsequent step
										;consider decrementing enemy count to track game over condition
	RET									;return to caller which was _eachMissile

__putMissile
	;arrive here with HL pointing to updated mrow
	LD A, (HL)
	LD (row), A
	INC HL
	LD A, (HL)
	LD (col), A
	LD IX, missile
	CALL putSprite
	RET									;return to caller which was _eachMissile

putInvaders:
	;(row),(vcol) must be initialized
	;(row) will be destroyed--so keep a copy of it
	;(col) will be destroyed--so keep a copy of it
	
	PUSH BC								;save our B counter for DJNZ, below

	;for 1st iteration HL = invaders
	;subsequent iterations stepped through during invaderLine
	LD A, (vcol)						;recall invader fleet vcol value
	LD (col), A							;init col at vcol value
	LD B, $0B							;Iterate invaderLine 11d times
	CALL invaderLine
	
	LD A, (row)							;stage row in A
	ADD A, 8							;increment by 8px
	LD (row), A							;update row in memory
	POP BC
	DJNZ putInvaders
	RET

invaderLine:
	;(row),(col) must be initialized
	;HL must point to invaders array e.g. LD HL, invaders
	;(col) will be destroyed--so keep a copy of it
	
	PUSH BC								;save our B counter for DJNZ
	
	;HL is already pointing at correct element of invaders
	LD B, 0								;init BC upper byte to 0
	LD A, (HL)							;element value is spritesheet offset in bytes
	LD C, A								;init BC lower byte to staged value

	LD IX, sp_sheet						;get spritesheet
	ADD IX, BC							;value at index is sprite frame offset in bytes
	PUSH HL								;save our place in invaders array
	CALL putSprite

	;check if we're done with this line
	;either way, we still need to POP & INC to be ready for next col or next line
	POP HL								;recall our place in invaders array
	INC HL								;advance to next element
	LD A, (col)							;recall col in px
	ADD A, 8							;add 8px
	LD (col), A							;update col
	POP BC								;recall our B counter
	DJNZ invaderLine
	RET

;anim:
	;(framect) must be initialized
	;IX must be pre-loaded with sprite, e.g. LD IX, pacman
	;this works cuz putSprite INCs IX thru each sprite row
	;so last row of frame sets up 1st row of next frame
	;CALL clearGrBuffer					;erase entire buffer every time?? only if we must
	
	;CALL putSprite
	;LD A, (framect)
	;DEC A
	;RET Z
	;LD (framect), A
	;JR anim

putSprite:
	;(row),(col) must be initialized
	;IX must be pre-loaded with sprite, e.g. LD IX, pacman
	;draws an 8x8 sprite
	;looks up row, col values from variables
	;IX must contain pointer to sprite
	;Registers destroyed: A, HL, DE, BC, IX

	;first let's find the byte row!
	;Address should be 12 * row + col
	;only need to do this once for 1st row (we'll just increment thereafter)
	LD A, (row)							;row in px
	LD DE, $0C							;12d
	CALL de_times_a						;result is in HL
	PUSH HL								;save this result
	LD HL, PlotSScreen					;point to screen buffer
	POP BC								;retrieve result
	ADD HL, BC							;add result (row offset) to HL
	
	;next find byte column & bitshift (if any)
	;Byte offset should be col / 8
	;only need to do this once for 1st row (we'll just increment thereafter)
	LD A, (col)							;col in px
	LD D, A								;dividend A
	LD E, 8								;divisor 8
	CALL div_d_e						;quotient (column) to D, remainder (bitshift) to A
	LD (spriteShift), A					;save bitshift to RAM
	LD B, 0								;Zero-out the left half of BC
	LD C, D								;load quotient (column) to C of BC
	ADD HL, BC							;add (column) offset to HL
	
	LD B, 8								;_spriteRow to run 8 times via DJNZ

_spriteRow:
	;expect IX to contain ptr to sprite
	;draw a 1-byte horizontal row of a sprite
	;first load the spriterow into memory
	PUSH BC								;preserve B for DJNZ later
	LD A, (IX)							;load sprite from IX to A
	LD (ltpart), A						;store a copy of sprite in leftpart
	LD (rtpart), A						;store a copy of sprite in rightpart
	LD A, (spriteShift)					;recall spriteshift
	CP 0								;compare A to zero
	JR Z, _leftByte						;if A is zero JP to leftByte, don't do any bit shifting

	;handle situation where x spans 2 bytes
	;A contains the shift offset from above
	LD B, A								;prepare to loop B times per offset bits
	LD C, A								;will use offset for masking momentarily
	PUSH HL								;preserve byte location
	CALL _shiftLoop						;loop will run B times to shift bits
	PUSH HL								;preserve rtpart
	LD HL, myMask						;NOTE: B is zero coming out of loop; C holds offset, so...
	ADD HL, BC							;...HL now points to correct mask for this offset
	LD A, (HL)							;stage the mask value in A
	LD B, A								;Load B with mask value
	POP HL								;retrieve rtpart loc
	LD A, (HL)							;Load A with rtpart value
	AND B								;apply mask
	LD (rtpart), A						;rtpart is now masked
	JR _rightByte
	
_shiftLoop:
	LD HL, ltpart
	SRL (HL)							;shift right
	LD HL, rtpart
	RR (HL)								;rotate right
	DJNZ _shiftLoop
	RET
	
_rightByte:
	POP HL								;retrieve byte location
	INC HL								;move one byte ahead for right byte
	LD A, (rtpart)						;Stage A with right half of sprite bits
	OR (HL)								;OR with whatever's already there
	LD (HL), A							;set byte value; i.e. rtpart + existing
	DEC HL								;drop back to original SScreen location 
	
_leftByte:
	;for no bitshift, HL already contains correct SScreen loc, no need to pop
	LD A, (ltpart)						;Stage A with left half of sprite bits
	OR (HL)								;OR with whatever's already there
	LD (HL), A							;set byte value, e.g. ltpart + existing
	
_nextByte:
	LD B, 0								;B of BC to 0
	LD C, $0C							;C of BC to 12d
	ADD HL, BC							;increment HL by 12 for next row
	INC IX								;increment ptr to spriteRow

	POP BC
	DJNZ _spriteRow

	RET

clearGrBuffer:
	LD HL, PlotSScreen
	LD DE, PlotSScreen + 1
	LD BC, screenSize - 1
	LD (HL), 0
	LDIR
	RET

;fast multiplication route from http://tutorials.eeems.ca/ASMin28Days/lesson/day15.html
;HL = DE * A

de_times_a:
	LD HL, 0							;HL to store the product
	LD B, 8								;8-bits to check

_loop0:
	RRCA								;check LSB of A
	JR NC, _skip						;if zero, skip addition
	ADD HL, DE

_skip:
	SLA E								;shift DE one bit left
	RL D
	DJNZ _loop0
	RET

;division routine from wikiti.brandonw.net
;divide d by e, quotient result in d, remainder in a

div_d_e:
	XOR A
	LD B, 8

_loop1:
	SLA D
	RLA
	CP E
	JR C, $+4
	SUB E
	INC D

	DJNZ _loop1

	RET

sp_sheet:
;empty i.e. vanquished invader
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00000000

;style alpha frame 1
.DB %00000000
.DB %01100011
.DB %00010100
.DB %00111110
.DB %01101011
.DB %01111111
.DB %01000001
.DB %00110110

;style alpha frame 2
.DB %00000000
.DB %01100011
.DB %00010100
.DB %00111110
.DB %01101011
.DB %01111111
.DB %01010101
.DB %00100010

;style beta frame 1
.DB %00000000
.DB %00011100
.DB %00111110
.DB %01111111
.DB %01101101
.DB %01111111
.DB %00101010
.DB %01001001

;style beta frame 2
.DB %00000000
.DB %00011100
.DB %00111110
.DB %01111111
.DB %01011011
.DB %01111111
.DB %00101010
.DB %01001001

;style exploded (40d, $28)
.DB %00000000
.DB %01001001
.DB %00101010
.DB %00000000
.DB %01100011
.DB %00000000
.DB %00101010
.DB %01001001

invaders:
.DB $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
.DB $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
.DB $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
.DB $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20

player:
;right facing
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00010100
.DB %00011100
.DB %00111110
.DB %01111111
.DB %01111111

missile:
.DB %00000000
.DB %00000000
.DB %00000000
.DB %00001000
.DB %00001000
.DB %00000000
.DB %00000000
.DB %00000000

;why not write these as binary masks since that's what they're used for??? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< LOOK
myMask:
.DB 0, $80, $C0, $E0, $F0, $F8, $FC, $FE, $FF

quitMessage:
.DB "Press 1 to Continue. Any other key to Quit.",0

.END